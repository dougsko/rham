/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RPCROT_H_RPCGEN
#define _RPCROT_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

/*
 *  Hamlib Interface - RPC definitions
 *  Copyright (c) 2000-2002 by Stephane Fillod and Frank Singleton
 *  Contributed by Francois Retief <fgretief@sun.ac.za>
 *
 *	$Id: rpcrot.x,v 1.3 2005/03/28 09:37:24 fillods Exp $
 *
 *   This library is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU Library General Public License as
 *   published by the Free Software Foundation; either version 2 of
 *   the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Library General Public License for more details.
 *
 *   You should have received a copy of the GNU Library General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <rpc/xdr.h>
#include <hamlib/rotator.h>
#if __APPLE__
static int _rpcsvcdirty;
#endif

typedef u_int model_x;

typedef float azimuth_x;

typedef float elevation_x;

typedef u_int rot_reset_x;

struct position_arg {
	azimuth_x az;
	elevation_x el;
};
typedef struct position_arg position_arg;

struct move_s {
	int direction;
	int speed;
};
typedef struct move_s move_s;

struct position_s {
	azimuth_x az;
	elevation_x el;
};
typedef struct position_s position_s;

struct position_res {
	int rotstatus;
	union {
		position_s pos;
	} position_res_u;
};
typedef struct position_res position_res;

struct rotstate_s {
	azimuth_x az_min;
	azimuth_x az_max;
	elevation_x el_min;
	elevation_x el_max;
};
typedef struct rotstate_s rotstate_s;

struct rotstate_res {
	int rotstatus;
	union {
		rotstate_s state;
	} rotstate_res_u;
};
typedef struct rotstate_res rotstate_res;

#define ROTPROG 0x20000999
#define ROTVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define GETMODEL 1
extern  model_x * getmodel_1(void *, CLIENT *);
extern  model_x * getmodel_1_svc(void *, struct svc_req *);
#define GETROTSTATE 3
extern  rotstate_res * getrotstate_1(void *, CLIENT *);
extern  rotstate_res * getrotstate_1_svc(void *, struct svc_req *);
#define SETPOSITION 10
extern  int * setposition_1(position_s *, CLIENT *);
extern  int * setposition_1_svc(position_s *, struct svc_req *);
#define GETPOSITION 11
extern  position_res * getposition_1(void *, CLIENT *);
extern  position_res * getposition_1_svc(void *, struct svc_req *);
#define STOP 12
extern  int * stop_1(void *, CLIENT *);
extern  int * stop_1_svc(void *, struct svc_req *);
#define RESET 13
extern  int * reset_1(rot_reset_x *, CLIENT *);
extern  int * reset_1_svc(rot_reset_x *, struct svc_req *);
#define PARK 14
extern  int * park_1(void *, CLIENT *);
extern  int * park_1_svc(void *, struct svc_req *);
#define MOVE 15
extern  int * move_1(move_s *, CLIENT *);
extern  int * move_1_svc(move_s *, struct svc_req *);
extern int rotprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define GETMODEL 1
extern  model_x * getmodel_1();
extern  model_x * getmodel_1_svc();
#define GETROTSTATE 3
extern  rotstate_res * getrotstate_1();
extern  rotstate_res * getrotstate_1_svc();
#define SETPOSITION 10
extern  int * setposition_1();
extern  int * setposition_1_svc();
#define GETPOSITION 11
extern  position_res * getposition_1();
extern  position_res * getposition_1_svc();
#define STOP 12
extern  int * stop_1();
extern  int * stop_1_svc();
#define RESET 13
extern  int * reset_1();
extern  int * reset_1_svc();
#define PARK 14
extern  int * park_1();
extern  int * park_1_svc();
#define MOVE 15
extern  int * move_1();
extern  int * move_1_svc();
extern int rotprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_model_x (XDR *, model_x*);
extern  bool_t xdr_azimuth_x (XDR *, azimuth_x*);
extern  bool_t xdr_elevation_x (XDR *, elevation_x*);
extern  bool_t xdr_rot_reset_x (XDR *, rot_reset_x*);
extern  bool_t xdr_position_arg (XDR *, position_arg*);
extern  bool_t xdr_move_s (XDR *, move_s*);
extern  bool_t xdr_position_s (XDR *, position_s*);
extern  bool_t xdr_position_res (XDR *, position_res*);
extern  bool_t xdr_rotstate_s (XDR *, rotstate_s*);
extern  bool_t xdr_rotstate_res (XDR *, rotstate_res*);

#else /* K&R C */
extern bool_t xdr_model_x ();
extern bool_t xdr_azimuth_x ();
extern bool_t xdr_elevation_x ();
extern bool_t xdr_rot_reset_x ();
extern bool_t xdr_position_arg ();
extern bool_t xdr_move_s ();
extern bool_t xdr_position_s ();
extern bool_t xdr_position_res ();
extern bool_t xdr_rotstate_s ();
extern bool_t xdr_rotstate_res ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_RPCROT_H_RPCGEN */
